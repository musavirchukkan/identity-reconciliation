#!/bin/bash

# Deployment script for Bitespeed Identity Reconciliation Service
set -e

echo "🚀 Deploying Bitespeed Identity Reconciliation Service..."

# Check if required tools are installed
command -v git >/dev/null 2>&1 || { echo "❌ Git is required but not installed. Aborting." >&2; exit 1; }
command -v npm >/dev/null 2>&1 || { echo "❌ npm is required but not installed. Aborting." >&2; exit 1; }

# Function to check if we're in a git repository
check_git_repo() {
    if ! git rev-parse --git-dir > /dev/null 2>&1; then
        echo "❌ Not in a git repository. Please initialize git first."
        exit 1
    fi
}

# Function to run pre-deployment checks
run_predeploy_checks() {
    echo "🔍 Running pre-deployment checks..."
    
    # Check if package.json exists
    if [ ! -f "package.json" ]; then
        echo "❌ package.json not found. Are you in the right directory?"
        exit 1
    fi
    
    # Install dependencies
    echo "📦 Installing dependencies..."
    npm ci
    
    # Run tests
    echo "🧪 Running tests..."
    npm run test
    
    # Build the project
    echo "🔨 Building project..."
    npm run build
    
    # Check if build was successful
    if [ ! -d "dist" ]; then
        echo "❌ Build failed. dist directory not found."
        exit 1
    fi
    
    echo "✅ Pre-deployment checks passed!"
}

# Function to prepare for Render deployment
prepare_render_deployment() {
    echo "🌐 Preparing for Render.com deployment..."
    
    # Create render.yaml if it doesn't exist
    if [ ! -f "render.yaml" ]; then
        echo "📝 Creating render.yaml configuration..."
        # render.yaml content would be created here
        echo "✅ render.yaml created. Please review and customize it."
    fi
    
    # Check for required environment variables
    echo "🔧 Checking environment configuration..."
    
    if [ ! -f ".env.production.example" ]; then
        echo "⚠️  .env.production.example not found. Please create it with required variables."
    fi
    
    echo "📋 Required environment variables for Render:"
    echo "  - DATABASE_URL (will be auto-generated by Render)"
    echo "  - API_KEY (optional but recommended)"
    echo "  - CORS_ORIGINS (should match your domain)"
    echo "  - LOG_LEVEL (INFO recommended for production)"
}

# Function to create deployment instructions
create_deployment_instructions() {
    cat > DEPLOYMENT.md << 'EOF'
# Deployment Instructions

## Render.com Deployment

### Prerequisites
1. Create a Render.com account
2. Connect your GitHub repository to Render

### Steps

1. **Create PostgreSQL Database**
   - Go to Render Dashboard
   - Click "New +" → "PostgreSQL"
   - Choose "Free" plan
   - Name: `bitespeed-postgres`
   - Database Name: `bitespeed_identity`
   - User: `bitespeed`

2. **Create Web Service**
   - Click "New +" → "Web Service"
   - Connect your GitHub repository
   - Choose the branch (usually `main`)
   - Configuration:
     - Runtime: Node
     - Build Command: `npm ci && npm run build && npx prisma generate && npx prisma db push`
     - Start Command: `npm start`
     - Plan: Free (or paid for production)

3. **Environment Variables**
   Set the following in Render dashboard:
   ```
   NODE_ENV=production
   PORT=10000
   DATABASE_URL=[Auto-filled by database connection]
   LOG_LEVEL=INFO
   RATE_LIMIT_MAX_REQUESTS=100
   CORS_ORIGINS=https://your-app-name.onrender.com
   ```

4. **Optional Security Variables**
   ```
   API_KEY=your-secure-api-key-here
   ```

5. **Deploy**
   - Click "Create Web Service"
   - Wait for deployment to complete
   - Check logs for any issues

### Post-Deployment

1. **Test the endpoint**
   ```bash
   curl https://your-app-name.onrender.com/health
   ```

2. **Test the identify endpoint**
   ```bash
   curl -X POST https://your-app-name.onrender.com/identify \
     -H "Content-Type: application/json" \
     -d '{"email": "test@example.com", "phoneNumber": "1234567890"}'
   ```

### Troubleshooting

- Check Render logs if deployment fails
- Ensure all environment variables are set correctly
- Database connection issues: verify DATABASE_URL format
- Build failures: check Node.js version compatibility

### Monitoring

- Enable Render's monitoring features
- Set up health check at `/health`
- Monitor response times and error rates
EOF

    echo "✅ Created DEPLOYMENT.md with detailed instructions"
}

# Function to validate deployment configuration
validate_deployment_config() {
    echo "🔍 Validating deployment configuration..."
    
    # Check if all required files exist
    required_files=("package.json" "tsconfig.json" "prisma/schema.prisma")
    
    for file in "${required_files[@]}"; do
        if [ ! -f "$file" ]; then
            echo "❌ Required file missing: $file"
            exit 1
        fi
    done
    
    # Check package.json scripts
    if ! npm run --silent build > /dev/null 2>&1; then
        echo "⚠️  Build script may have issues. Please test manually."
    fi
    
    echo "✅ Deployment configuration validated"
}

# Function to create a production checklist
create_production_checklist() {
    cat > PRODUCTION_CHECKLIST.md << 'EOF'
# Production Deployment Checklist

## Before Deployment
- [ ] All tests pass (`npm run test`)
- [ ] Build succeeds (`npm run build`)
- [ ] Environment variables configured
- [ ] Database schema up to date
- [ ] Security configurations reviewed

## Render.com Setup
- [ ] PostgreSQL database created
- [ ] Web service connected to repository
- [ ] Environment variables set
- [ ] Build and start commands configured
- [ ] Health check endpoint configured (`/health`)

## Security
- [ ] API_KEY set (if using API key authentication)
- [ ] CORS_ORIGINS configured correctly
- [ ] Rate limiting configured appropriately
- [ ] Input validation enabled
- [ ] HTTPS enforced

## Post-Deployment Testing
- [ ] Health check responds: `GET /health`
- [ ] Identify endpoint works: `POST /identify`
- [ ] Rate limiting functions correctly
- [ ] Database connectivity confirmed
- [ ] Error handling works as expected

## Monitoring
- [ ] Application logs reviewed
- [ ] Performance metrics baseline established
- [ ] Error monitoring configured
- [ ] Database performance monitored

## Documentation
- [ ] README updated with live endpoint
- [ ] API documentation reflects production setup
- [ ] Environment variable documentation complete
EOF

    echo "✅ Created PRODUCTION_CHECKLIST.md"
}

# Function to update README with deployment information
update_readme_with_deployment() {
    echo "📝 Adding deployment section to README..."
    
    # Create a temporary deployment section
    cat > temp_deployment_section.md << 'EOF'

## 🌐 Live Demo

**Production Endpoint:** `https://bitespeed-identity-service.onrender.com`

### Try the API

```bash
# Health check
curl https://bitespeed-identity-service.onrender.com/health

# Identify endpoint
curl -X POST https://bitespeed-identity-service.onrender.com/identify \
  -H "Content-Type: application/json" \
  -d '{"email": "test@example.com", "phoneNumber": "1234567890"}'
```

**Note:** The free tier may have cold starts. First request might take 10-15 seconds.

EOF
    
    echo "ℹ️  Deployment section created. You can add this to your README manually."
}

# Main deployment flow
main() {
    echo "🎯 Starting deployment process..."
    
    # Parse command line arguments
    case "${1:-help}" in
        "check")
            check_git_repo
            run_predeploy_checks
            ;;
        "prepare")
            prepare_render_deployment
            validate_deployment_config
            ;;
        "docs")
            create_deployment_instructions
            create_production_checklist
            ;;
        "readme")
            update_readme_with_deployment
            ;;
        "all")
            check_git_repo
            run_predeploy_checks
            prepare_render_deployment
            validate_deployment_config
            create_deployment_instructions
            create_production_checklist
            update_readme_with_deployment
            ;;
        "help" | *)
            echo "📚 Deployment Script Usage:"
            echo ""
            echo "Commands:"
            echo "  check    - Run pre-deployment checks (tests, build)"
            echo "  prepare  - Prepare configuration for Render deployment"
            echo "  docs     - Create deployment documentation"
            echo "  readme   - Update README with deployment info"
            echo "  all      - Run all preparation steps"
            echo "  help     - Show this help message"
            echo ""
            echo "Examples:"
            echo "  ./scripts/deploy.sh check"
            echo "  ./scripts/deploy.sh all"
            ;;
    esac
}

# Run the main function
main "$@"

echo ""
echo "✅ Deployment preparation complete!"
echo ""
echo "Next steps:"
echo "1. Review the generated documentation"
echo "2. Create a Render.com account if you haven't already"
echo "3. Follow the instructions in DEPLOYMENT.md"
echo "4. Test your deployed application thoroughly"
echo ""
echo "🚀 Happy deploying!"